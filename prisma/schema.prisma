// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

// Enums
enum UserRole {
  CLIENT
  CAREGIVER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

enum ServiceCategory {
  PERSONAL_CARE
  MEDICAL_CARE
  COMPANIONSHIP
  HOUSEHOLD_TASKS
  TRANSPORTATION
  SPECIALIZED_CARE
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

// Core Models
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  firstName    String
  lastName     String
  phone        String?
  role         UserRole
  isVerified   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  caregiverProfile  CaregiverProfile?
  clientBookings    Booking[]               @relation("ClientBookings")
  caregiverBookings Booking[]               @relation("CaregiverBookings")
  sentMessages      Message[]               @relation("SentMessages")
  chatRooms         ChatRoomParticipant[]
  reviews           Review[]                @relation("ReviewAuthor")
  receivedReviews   Review[]                @relation("ReviewTarget")

  @@map("users")
}

model CaregiverProfile {
  id          String         @id @default(cuid())
  userId      String         @unique
  bio         String
  experience  Int // years of experience
  hourlyRate  Decimal        @db.Decimal(10, 2)
  rating      Decimal?       @db.Decimal(3, 2)
  reviewCount Int            @default(0)
  isVerified  Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relationships
  user            User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  services        CaregiverService[]
  certifications  Certification[]
  availability    AvailabilitySlot[]

  @@map("caregiver_profiles")
}

model Service {
  id          String          @id @default(cuid())
  name        String
  description String
  category    ServiceCategory
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relationships
  caregivers CaregiverService[]
  bookings   Booking[]

  @@map("services")
}

model CaregiverService {
  id           String @id @default(cuid())
  caregiverId  String
  serviceId    String
  customRate   Decimal? @db.Decimal(10, 2) // Optional custom rate for this service
  isAvailable  Boolean  @default(true)

  // Relationships
  caregiver CaregiverProfile @relation(fields: [caregiverId], references: [id], onDelete: Cascade)
  service   Service          @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([caregiverId, serviceId])
  @@map("caregiver_services")
}

model Certification {
  id           String    @id @default(cuid())
  caregiverId  String
  name         String
  issuedBy     String
  issuedDate   DateTime?
  expiryDate   DateTime?
  documentUrl  String?
  isVerified   Boolean   @default(false)
  createdAt    DateTime  @default(now())

  // Relationships
  caregiver CaregiverProfile @relation(fields: [caregiverId], references: [id], onDelete: Cascade)

  @@map("certifications")
}

model AvailabilitySlot {
  id          String    @id @default(cuid())
  caregiverId String
  dayOfWeek   DayOfWeek
  startTime   String // Format: "HH:MM"
  endTime     String // Format: "HH:MM"
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  caregiver CaregiverProfile @relation(fields: [caregiverId], references: [id], onDelete: Cascade)

  @@map("availability_slots")
}

model Booking {
  id                      String        @id @default(cuid())
  clientId                String
  caregiverId             String
  serviceId               String
  scheduledDate           DateTime?
  startTime               String?       // Format: "HH:MM"
  endTime                 String?       // Format: "HH:MM"
  duration                Int?          // Duration in minutes
  hourlyRate              Decimal?      @db.Decimal(10, 2)
  totalAmount             Decimal       @db.Decimal(10, 2)
  location                String?
  notes                   String?
  emergencyContactName    String?
  emergencyContactPhone   String?
  status                  BookingStatus @default(PENDING)
  confirmedAt             DateTime?
  completedAt             DateTime?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt

  // Relationships
  client    User             @relation("ClientBookings", fields: [clientId], references: [id])
  caregiver User             @relation("CaregiverBookings", fields: [caregiverId], references: [id])
  service   Service          @relation(fields: [serviceId], references: [id])
  payment   Payment?
  chatRoom  ChatRoom?
  reviews   Review[]

  @@map("bookings")
}

model Payment {
  id              String        @id @default(cuid())
  bookingId       String        @unique
  amount          Decimal       @db.Decimal(10, 2)
  currency        String        @default("USD")
  status          PaymentStatus
  paymentMethodId String
  transactionId   String?
  processedAt     DateTime?
  createdAt       DateTime      @default(now())

  // Relationships
  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Review {
  id        String   @id @default(cuid())
  bookingId String
  authorId  String
  targetId  String
  rating    Int // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  author  User    @relation("ReviewAuthor", fields: [authorId], references: [id])
  target  User    @relation("ReviewTarget", fields: [targetId], references: [id])

  @@unique([bookingId, authorId])
  @@map("reviews")
}

model ChatRoom {
  id            String   @id @default(cuid())
  bookingId     String?  @unique
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())

  // Relationships
  booking      Booking?              @relation(fields: [bookingId], references: [id])
  participants ChatRoomParticipant[]
  messages     Message[]

  @@map("chat_rooms")
}

model ChatRoomParticipant {
  id       String @id @default(cuid())
  roomId   String
  userId   String
  joinedAt DateTime @default(now())

  // Relationships
  room ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
  @@map("chat_room_participants")
}

model Message {
  id          String      @id @default(cuid())
  roomId      String
  senderId    String
  content     String
  messageType MessageType @default(TEXT)
  sentAt      DateTime    @default(now())

  // Relationships
  room   ChatRoom      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender User          @relation("SentMessages", fields: [senderId], references: [id])
  readBy MessageRead[]

  @@map("messages")
}

model MessageRead {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())

  // Relationships
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@map("message_reads")
}

